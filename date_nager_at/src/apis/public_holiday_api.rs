/*
 * Nager.Date API - V3
 *
 * Nager.Date is open source software and is completely free for commercial use. If you would like to support the project you can award a GitHub star ‚≠ê or even better <a href='https://github.com/sponsors/nager'>actively support us</a>
 *
 * The version of the OpenAPI document: v3
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`public_holiday_is_today_public_holiday`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PublicHolidayIsTodayPublicHolidayError {
    Status400(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`public_holiday_next_public_holidays`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PublicHolidayNextPublicHolidaysError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`public_holiday_next_public_holidays_worldwide`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PublicHolidayNextPublicHolidaysWorldwideError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`public_holiday_public_holidays_v3`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PublicHolidayPublicHolidaysV3Error {
    Status400(),
    Status404(),
    UnknownValue(serde_json::Value),
}


/// The calculation is made on the basis of UTC time to adjust the time please use the offset.<br />  This is a special endpoint for `curl`<br /><br />  200 = Today is a public holiday<br />  204 = Today is not a public holiday<br /><br />  `STATUSCODE=$(curl --silent --output /dev/stderr --write-out \"%{http_code}\" https://date.nager.at/Api/v2/IsTodayPublicHoliday/AT)`<br /><br />  `if [ $STATUSCODE -ne 200 ]; then # error handling; fi`
pub async fn public_holiday_is_today_public_holiday(configuration: &configuration::Configuration, country_code: &str, county_code: Option<&str>, offset: Option<i32>) -> Result<(), Error<PublicHolidayIsTodayPublicHolidayError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v3/IsTodayPublicHoliday/{countryCode}", local_var_configuration.base_path, countryCode=crate::apis::urlencode(country_code));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = county_code {
        local_var_req_builder = local_var_req_builder.query(&[("countyCode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<PublicHolidayIsTodayPublicHolidayError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn public_holiday_next_public_holidays(configuration: &configuration::Configuration, country_code: &str) -> Result<Vec<crate::models::PublicHolidayV3Dto>, Error<PublicHolidayNextPublicHolidaysError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v3/NextPublicHolidays/{countryCode}", local_var_configuration.base_path, countryCode=crate::apis::urlencode(country_code));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PublicHolidayNextPublicHolidaysError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn public_holiday_next_public_holidays_worldwide(configuration: &configuration::Configuration, ) -> Result<Vec<crate::models::PublicHolidayV3Dto>, Error<PublicHolidayNextPublicHolidaysWorldwideError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v3/NextPublicHolidaysWorldwide", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PublicHolidayNextPublicHolidaysWorldwideError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn public_holiday_public_holidays_v3(configuration: &configuration::Configuration, year: i32, country_code: &str) -> Result<Vec<crate::models::PublicHolidayV3Dto>, Error<PublicHolidayPublicHolidaysV3Error>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v3/PublicHolidays/{year}/{countryCode}", local_var_configuration.base_path, year=year, countryCode=crate::apis::urlencode(country_code));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PublicHolidayPublicHolidaysV3Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

